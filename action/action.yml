name: 'Checkmarx CxFlow++ GitHub Action'
description: 'Orchestrates vulnerability scanning and issue tracker item lifecycle.'
author: 'Nathan Leach, Principal Solutions Architect, Checkmarx'

inputs:
  # Required parameters
  project-name:
    required: true
    description: The name of the scan project.  This should include the branch being scanned using your organization's established system naming convention. The string `{branch}` will be replaced by the event's branch name if found in the project name.
  app-name:
    required: true
    description: The name of the application used when making issue tracker tags.


  # Required unless disable-sast-scan is set to true
  sast-url:
    required: false
    description: The base URL to the Checkmarx SAST server (do not include CxWebClient).
  sast-team:
    required: false
    description: The full path of the SAST team that owns the project to scan.
  sast-username:
    required: false
    description: The username of the SAST account to use for scanning.
  sast-password:
    required: false
    description: The password for the selected SAST account.

  # Required unless disable-sca-scan is set to true
  sca-tenant:
    required: false
    description: The name of the SCA tenant.
  sca-username:
    required: false
    description: The username of the SCA account to use for scanning.
  sca-password:
    required: false
    description: The password for the selected SCA account.

  # Optional parameters
  cxflow-jar-path:
    default: ''
    description: The local path to the CxFlow jar.  If blank, CxFlow will be downloaded.
  cxflow-version:
    default: latest
    description: The CxFlow version to use for execution.  Ignored if cxflow-jar-path is set.
  cxflow-params:
    description: Command line parameters to pass to CxFlow at every execution.
  pull-request-cxflow-params:
    description: Command line parameters passed to CxFlow only when executing during a pull-request event.
  push-cxflow-params:
    description: Command line parameters passed to CxFlow only when executing during a push event.

  docker-login-registry:
    default: docker.io
    description: The name of the container registry to use for login.
  docker-login-username:
    default: ''
    description: The username for the container registry login.
  docker-login-password:
    default: ''
    description: The password for the container registry login.

  upload-sarif-file:
    default: true
    description: Uploads the Sarif file to create entries on the GitHub security tab during push events. 
  delete-sarif-file:
    default: true
    description: Set to "false" when using the Sarif feedback channel to keep the Sarif file at the path returned in the sarif-path output parameter.


  default-branch:
    default: ${{ github.event.repository.default_branch }}
    description: The default branch of the repository used as the root parent project in SAST from which branch projects are derived.  This defaults to the repo's defined default branch.
  disable-sast-scan:
    default: false
    description: Set to true to disable SAST scanning.
  disable-sca-scan:
    default: false
    description: Set to true to disable SCA scanning.
  enable-wire-trace:
    default: false
    description: Set to true to emit web API I/O wire tracing to the action logs.
  sast-log-level:
    default: INFO
    description: The logging level for CxFlow output emitted as the action executes. (TRACE, DEBUG, ERROR, INFO)
  java-opts:
    default: -Xms512m -Xmx2048m
    description: Options to pass to the JVM.
  java-props:
    default: -Djava.security.egd=file:/dev/./urandom
    description: Properties to pass to the JVM.
  push-feedback-channel:
    default: Sarif
    description: The feedback channel to use when scanning for a push.
  pull-request-feedback-channel:
    default: GITHUBPULL
    description: The feedback channel to use when scanning for a pull request.
  application-yaml-path:
    default: ''
    description: A path to a CxFlow yaml configuration file.
  scaresolver-tag:
    default: ''
    description: The tag for the containerized SCAResolver build environment where the action will execute dependency scanning.  The image must not be built with a *-bare target. If this is not supplied, the SCA dependency scan will execute on the SCA server.
  spring-props:
    default: ''
    description: Spring boot properties to pass to the JVM.
  custom-ca-path:
    default: ''
    description: Path to a file or directory containing a custom CA cert chain that is imported into the Java runtime cacerts store. 

  # For development purposes only - not documented.
  action-root:
    default: .
    description: The root directory containing the action artifacts.
  action-artifact-path:
    default:
    description: The path under the root directory where the action artifacts can be found.

outputs:
  sarif-path:
    description: The path to the Sarif file produced from the scan.
    value: ${{ steps.sarif-path-gen.outputs.sarif-path }}
runs:
  using: 'composite'
  steps:
    - uses: actions/setup-java@v3
      with:
        distribution: 'corretto'
        java-version: '17'

    - name: Container Registry Login
      uses: docker/login-action@v2
      if: inputs.docker-login-username != '' && inputs.docker-login-password != ''
      with:
        registry: ${{ inputs.docker-login-registry }}
        username: ${{ inputs.docker-login-username }}
        password: ${{ inputs.docker-login-password }}


    - name: Import custom certs
      if: inputs.custom-ca-path != ''
      shell: bash
      run: |
        if [ -f "${{ inputs.custom-ca-path }}" ];
        then
          keytool -importcert -cacerts -storepass changeit -noprompt -file "${{ inputs.custom-ca-path }}"
        fi

        if [ -d "${{ inputs.custom-ca-path }}" ];
        then
          for CA in $(ls ${{ inputs.custom-ca-path }});
          do
            keytool -alias "$CA" -importcert -cacerts -storepass changeit -noprompt -file "${{ inputs.custom-ca-path }}/${CA}" \
              && echo "Imported $CA" || echo "$CA was not imported"
          done
        fi


    - name: Resolve CxFlow
      if: inputs.cxflow-jar-path == ''
      shell: bash
      run: | 

        if [ "${{ inputs.cxflow-version }}" == "latest" ]; then

          CXFLOW_JAR=$(curl -s https://api.github.com/repos/checkmarx-ltd/cx-flow/releases/latest | \
            jq ".assets[].browser_download_url" | \
            grep java11 | \
            sed -r 's/.?http.*\/(.+java11.jar).?$/\1/g')

          CXFLOW_VERSION=$(echo $CXFLOW_JAR | sed -r 's/cx-flow-(.+)-java11.jar/\1/g')
        else
          export CXFLOW_VERSION=${{ inputs.cxflow-version }}
          export CXFLOW_JAR=cx-flow-$CXFLOW_VERSION-java11.jar
        fi

        echo "CXFLOW_VERSION=$CXFLOW_VERSION" >> "$GITHUB_ENV"
        echo "CXFLOW_JAR=$CXFLOW_JAR" >> "$GITHUB_ENV"
        echo "CXFLOW_FOLDER=$(realpath ../cxflow-$GITHUB_REPOSITORY_OWNER)" >> "$GITHUB_ENV"


    - name: Downloading CxFlow
      shell: bash
      if: inputs.cxflow-jar-path == ''
      run: |
        [[ ! -d "${{ env.CXFLOW_FOLDER }}" ]] && mkdir ${{ env.CXFLOW_FOLDER }} || :
        [[ ! -f  ${{ env.CXFLOW_FOLDER }}/${{ env.CXFLOW_JAR}} ]] && wget -q -O ${{ env.CXFLOW_FOLDER }}/${{ env.CXFLOW_JAR}} \
        https://github.com/checkmarx-ltd/cx-flow/releases/download/${{ env.CXFLOW_VERSION }}/${{ env.CXFLOW_JAR }} || :


    - name: Set CxFlow jar location environment variables
      shell: bash
      if: inputs.cxflow-jar-path != ''
      run: |
        echo "CXFLOW_FOLDER=$(dirname $(realpath ${{ inputs.cxflow-jar-path }}) )" >> "$GITHUB_ENV"
        echo "CXFLOW_JAR=$(basename ${{ inputs.cxflow-jar-path }})" >> "$GITHUB_ENV"

    - name: Use custom config YAML 
      shell: bash
      if: inputs.application-yaml-path != ''
      run: |
        echo "CONFIG_PARAM=--spring.config.location='${{ inputs.application-yaml-path }}'" >> "$GITHUB_ENV"


    - name: Use default config YAML 
      shell: bash
      if: inputs.application-yaml-path == ''
      run: |
        echo "CONFIG_PARAM=--spring.config.location='${{ inputs.action-root }}/${{ inputs.action-artifact-path}}/cxflow-defaults.yml'" >> "$GITHUB_ENV"


    - name: Set params for PR
      shell: bash
      if: github.event_name == 'pull_request'
      run: |
        echo "CXFLOW_FEEDBACK_CHANNEL=${{ inputs.pull-request-feedback-channel }}" >> "$GITHUB_ENV"
        echo "CXFLOW_FEEDBACK_PARAMS=--bug-tracker='${{ inputs.pull-request-feedback-channel }}' --merge-id='${{ github.event.number }}'" >> "$GITHUB_ENV"
        echo "CXFLOW_EVENT_PARAMS=${{ inputs.pull-request-cxflow-params }}" >> "$GITHUB_ENV"
        echo "PROPER_BRANCH_NAME=${{ github.head_ref }}" >> "$GITHUB_ENV"


    - name: Set params for push
      shell: bash
      if: github.event_name == 'push'
      run: |
        echo "CXFLOW_FEEDBACK_CHANNEL=${{ inputs.push-feedback-channel }}" >> "$GITHUB_ENV"
        echo "CXFLOW_FEEDBACK_PARAMS=--bug-tracker='${{ inputs.push-feedback-channel }}'" >> "$GITHUB_ENV"
        echo "CXFLOW_EVENT_PARAMS=${{ inputs.push-cxflow-params }}" >> "$GITHUB_ENV"
        echo "PROPER_BRANCH_NAME=${{ github.ref_name }}" >> "$GITHUB_ENV"

    - name: Set project name
      shell: bash
      run: |
        PROJECT_NAME=$(echo ${{ inputs.project-name }} | sed -E "s/(.*)(\{branch\})(.*)/\1${{ env.PROPER_BRANCH_NAME }}\3/")
        echo "PROJECT_NAME=$PROJECT_NAME" >> "$GITHUB_ENV"

    - name: Set log level
      shell: bash
      run: echo "CXFLOW_LOGLEVEL_PARAMS=--logging.level.com.checkmarx='${{ inputs.sast-log-level }}'" >> "$GITHUB_ENV"


    - name: Set wire trace
      if: inputs.enable-wire-trace == 'true'
      shell: bash
      run: echo "WIRE_TRACE_PARAMS=--logging.level.org.apache.http.wire=TRACE" >> "$GITHUB_ENV"


    - name: Set SCAResolver parameters
      shell: bash
      if: inputs.scaresolver-tag != ''
      run: |
        echo "SCA_RESOLVER_CONFIG=--sca.enable-sca-resolver=true --sca.path-to-sca-resolver='${{ inputs.action-root }}/${{ inputs.action-artifact-path}}/'" >> "$GITHUB_ENV"


    - name: Set Sarif File Path
      id: sarif-path-gen
      shell: bash
      run: |
        echo "SARIF_FILE=${{ env.CXFLOW_FOLDER }}/${{ github.run_id }}.sarif" >> "$GITHUB_ENV"
        echo "sarif-path=${{ env.CXFLOW_FOLDER }}/${{ github.run_id }}.sarif" >> "$GITHUB_OUTPUT"


    - name: Enable Scanners
      shell: bash
      run: |
        SCANNERS=""
        [[ "${{ inputs.disable-sast-scan }}" == "false" ]] && SCANNERS="sast," || :
        [[ "${{ inputs.disable-sca-scan }}" == "false" ]] && SCANNERS="${SCANNERS}sca" || :
        echo "SCANNER_CONFIG=--cx-flow.enabled-vulnerability-scanners='${SCANNERS}'" >> "$GITHUB_ENV"


    - name: Prune deleted containers on self-hosted runner
      if: ${{ !startsWith(runner.name, 'GitHub') }}
      shell: bash
      run: docker system prune -f

    - name: Orchestrate scans with CxFlow
      if: inputs.disable-sast-scan == 'false' || inputs.disable-sca-scan == 'false'
      shell: bash
      env:
        CONTAINER_TAG: ${{ inputs.scaresolver-tag }}
        CHECKMARX_BASE_URL: ${{ inputs.sast-url }}
        CHECKMARX_URL: ${{ inputs.sast-url }}/cxrestapi
        CHECKMARX_USERNAME: ${{ inputs.sast-username }}
        CHECKMARX_PASSWORD: ${{ inputs.sast-password }}
        SCA_TENANT: ${{ inputs.sca-tenant }}
        SCA_USERNAME: ${{ inputs.sca-username }}
        SCA_PASSWORD: ${{ inputs.sca-password }}
        SARIF_FILE_PATH: ${{ env.SARIF_FILE }}
        GITHUB_TOKEN: ${{ github.token }}
        GITHUB_APIURL: ${{ github.api_url }}/repos
        GITHUB_URL: ${{ github.server_url }}
      run: |
        set +e

        java ${{ inputs.java-opts }} ${{ inputs.java-props }} ${{ inputs.spring-props }} \
          -jar ${{ env.CXFLOW_FOLDER }}/${{ env.CXFLOW_JAR}} \
          ${{ env.CONFIG_PARAM }} \
          --scan --f=. \
          ${{ env.SCA_RESOLVER_CONFIG }} \
          --cx-team='${{ inputs.sast-team }}' \
          --cx-project='${{ env.PROJECT_NAME }}' \
          --namespace='${{ github.repository_owner }}' \
          --repo-name='${{ github.event.repository.name }}' \
          --branch='${{ env.PROPER_BRANCH_NAME }}' \
          --default-branch='${{ inputs.default-branch }}' \
          ${{ env.CXFLOW_FEEDBACK_PARAMS }} \
          ${{ env.CXFLOW_LOGLEVEL_PARAMS }} \
          ${{ env.WIRE_TRACE_PARAMS }} \
          ${{ env.SCANNER_CONFIG }} \
          --SHA='${{ github.sha }}' \
          --app='${{ inputs.app-name }}' \
          ${{ inputs.cxflow-params }} \
          ${{ env.CXFLOW_EVENT_PARAMS }}

        echo "CXFLOW_RESULT=$?" >> "$GITHUB_ENV"


    - name: Upload Sarif Results
      if: inputs.upload-sarif-file == 'true' && env.CXFLOW_FEEDBACK_CHANNEL == 'Sarif' && (inputs.disable-sast-scan == 'false' || inputs.disable-sast-scan == 'false')
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: ${{ env.SARIF_FILE }}


    - name: Remove Sarif File
      if: env.CXFLOW_FEEDBACK_CHANNEL == 'Sarif' && inputs.delete-sarif-file == 'true'
      shell: bash
      run: |
        [[ -f "${{ env.SARIF_FILE }}" ]] && rm -f ${{ env.SARIF_FILE }} || :


    - name: Finalize
      if: ${{ !cancelled() }}
      shell: bash
      run: exit ${{ env.CXFLOW_RESULT }}
    

branding:
  color: 'green'
  icon: 'layers'
